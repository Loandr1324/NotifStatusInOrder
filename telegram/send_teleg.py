import telepot
from telepot.namedtuple import InlineKeyboardMarkup, InlineKeyboardButton
from config import TOKEN_BOT
from loguru import logger
import time

"""
–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ html —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
https://core.telegram.org/bots/api#html-style
"""


class NotifTelegram:
    def __init__(self):
        self.TOKEN = TOKEN_BOT
        self.message = dict.fromkeys(['text', 'keyboard'])
        self.count_msg = 0

    # def message_sup_order_cancel(self, num_order: str, position: dict, user_notif: dict) -> None:
    #     """
    #     –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º
    #     param: num_order: str - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞;
    #     return: dict {
    #         'text': —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: str
    #         'keyboard: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é: str'
    #         };
    #     """
    #
    #     row1 = ''
    #     if user_notif['msg_type'] == 'primary':
    #         if user_notif['type_order'] == 'user':
    #             row1 = "üî¥ <b>–û—Ç–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–∫–ª–∏–µ–Ω—Ç)</b>\n\n"
    #         elif user_notif['type_order'] == 'stock':
    #             row1 = "üü° <b>–û—Ç–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (—Å–∫–ª–∞–¥)</b>\n\n"
    #         elif user_notif['type_order'] == 'new_order':
    #             row1 = "üü† <b>–ó–∞–∫–∞–∑ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–±–æ—Ä–∫—É</b>\n\n"
    #
    #     elif user_notif['msg_type'] == 'secondary':
    #         if user_notif['type_order'] == 'user':
    #             row1 = "üî¥ <b>–û—Ç–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–∫–ª–∏–µ–Ω—Ç) (–ü–û–í–¢–û–†)</b>\n\n"
    #         elif user_notif['type_order'] == 'stock':
    #             row1 = "üü° <b>–û—Ç–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (—Å–∫–ª–∞–¥) (–ü–û–í–¢–û–†)</b>\n\n"
    #         elif user_notif['type_order'] == 'new_order':
    #             row1 = "üü† <b>–ó–∞–∫–∞–∑ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–±–æ—Ä–∫—É (–ü–û–í–¢–û–†)</b>\n\n"
    #
    #     elif user_notif['msg_type'] == 'error_reorder':
    #         row1 = "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É</b>\n\n"
    #
    #     url_cp_client = f'https://cpv1.pro/'
    #     url_order = f'{url_cp_client}?page=orders&id_order={num_order}'
    #     row2 = f'<b>–ó–∞–∫–∞–∑: </b><a href="{url_order}"><u>‚Ññ {num_order}</u></a>\n'
    #
    #     if user_notif.get('type_order') == 'new_order':
    #         row3, row4, row5 = '\n', '', ''
    #     else:
    #         url_client_site = f'https://az23.ru/'
    #         url_search = f'{url_client_site}search/{position["brand"]}/{position["number"]}'
    #         row3 = f'<b>–ü–æ–∑–∏—Ü–∏—è: </b><a href="{url_search}"><u>{position["brand"]} {position["number"]}</u></a>\n\n'
    #
    #         row4 = f'<code>{position["description"]}</code>\n'
    #         row5 = f'<b>–ü–æ—Å—Ç–∞–≤—â–∏–∫: </b><code>{position["distributorName"]}</code>\n\n'
    #
    #     if user_notif['msg_type'] == 'error_reorder':
    #         row6 = f'<b>–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: </b><code>{position["error"]}</code>\n'
    #         row7 = f'<i>{position["userName"]}</i>'
    #     elif user_notif.get('type_order') == 'new_order':
    #         row6 = f'<b>–ö–ª–∏–µ–Ω—Ç: </b>\n'
    #         row7 = (f'<i>{user_notif["full_name"]}</i>\n\n '
    #                 f'‚ö†Ô∏è <i>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞–∫–∞–∑ –∏ –ø–æ–∑–∏—Ü–∏—è–º '
    #                 f'<b>–∏–∑ –Ω–∞–ª–∏—á–∏—è</b> —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏"</i>')
    #     else:
    #         row6 = f'<b>–ö–ª–∏–µ–Ω—Ç: </b>\n'
    #         row7 = f'<i>{user_notif["full_name"]}</i>'
    #
    #     self.message['text'] = row1 + row2 + row3 + row4 + row5 + row6 + row7
    #
    #     # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    #     # self.message['keyboard'] = InlineKeyboardMarkup(inline_keyboard=[
    #     #     [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", url=url_order)],
    #     # ])

    def create_message_notif(self, num_order: str, position: dict, user_notif: dict, text_message: str) -> None:
        """
        –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º
        :param num_order: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        :param position: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        :param user_notif: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        :param text_message: –®–∞–±–ª–æ–Ω —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        :return: dict {
            'text': —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: str
            'keyboard: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é: str'
            };
        """
        icon_user_stock = 'üî¥' if user_notif.get('type_order', '') == 'user' else 'üü°'
        user_stock = '–∫–ª–∏–µ–Ω—Ç' if user_notif.get('type_order', '') == 'user' else '—Å–∫–ª–∞–¥'
        name = user_notif.get("full_name") if user_notif.get("full_name") else position.get("userName", "–ù–µ—Ç –∏–º–µ–Ω–∏")

        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        data = {
            "icon_user_stock": icon_user_stock,
            "user_stock": user_stock,
            "num_order": num_order,
            "domain_cp": "cpv1.pro",
            "article": position.get("number", "–ù–µ—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"),
            "brand": position.get("brand", "–ù–µ—Ç –±—Ä–µ–Ω–¥–∞"),
            "shop_domain": "az23.ru",
            "description": position.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"),
            "supplier": position.get("distributorName", "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"),
            "error": position.get("error", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ"),
            "full_name": name
        }

        # –ó–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–µ
        try:
            text = text_message.format(**data)
        except Exception as ex:
            text = f"""<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>
–í–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
<code>{list(data)}</code>
            
<b>–û—à–∏–±–∫–∞(–Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä):</b>
<code>{ex}</code>"""

        self.message['text'] = text

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        # self.message['keyboard'] = InlineKeyboardMarkup(inline_keyboard=[
        #     [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", url=url_order)],
        # ])

    def send_massage_chat(self, chat_id: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –±–æ—Ç"""
        logger.info(chat_id)

        telegram_bot = telepot.Bot(self.TOKEN)
        try:
            telegram_bot.sendMessage(
                chat_id, self.message['text'],
                parse_mode="HTML",
                reply_markup=self.message['keyboard'],
                disable_web_page_preview=True)

            self.count_msg += 1
            if self.count_msg == 19:
                logger.warning(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {self.count_msg} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º. –î–µ–ª–∞–µ–º –ø–∞—É–∑—É 60 —Å–µ–∫...")
                time.sleep(60)
                self.count_msg = 0
            return True
        except Exception as e:
            logger.error('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±—ã–ª–∞ –Ω–µ—É–¥–∞—á–Ω–∞. –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:')
            logger.error(e)
            return False
